import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader
from anode.models import ODENet
from anode.train import Trainer
from anode.test import Tester
from experiments.dataloader import CellData

device = torch.device('cpu')

data_dim = 7
hidden_dim = 16

data = torch.tensor([[0, 0, 0, 0.0, 1, -1, 0, 0],
                    [1, 1, 1, 0.5, 2, 0, 2, 0.5],
                    [2, 4, 0, 1.0, 3, 1, 4, 1.0],
                    [3, 9, 1, 1.5, 4, 2, 6, 1.5],
                    [4, 16, 0, 2.0, 5, 3, 8, 2.0],
                    [5, 25, 1, 2.5, 6, 4, 10, 2.5],
                    [6, 36, 0, 3.0, 7, 5, 12, 3.0],
                    [7, 49, 1, 3.5, 8, 6, 14, 3.5],
                    [8, 64, 0, 4.0, 9, 7, 16, 4.0],
                    [9, 81, 1, 4.5, 10, 8, 18, 4.5],
                    [10, 100, 0, 5.0, 11, 9, 20, 5.0],
                    [11, 121, 1, 5.5, 12, 10, 22, 5.5],
                    [12, 144, 0, 6.0, 13, 11, 24, 6.0],
                    [13, 169, 1, 6.5, 14, 12, 26, 6.5],
                    [14, 196, 0, 7.0, 15, 13, 28, 7.0],
                    [15, 225, 1, 7.5, 16, 14, 30, 7.5],
                    [16, 256, 0, 8.0, 17, 15, 32, 8.0],
                    [17, 289, 1, 8.5, 18, 16, 34, 8.5],
                    [18, 324, 0, 9.0, 19, 17, 36, 9.0],
                    [19, 361, 1, 9.5, 20, 18, 38, 9.5],
                    [20, 400, 0, 10.0, 21, 19, 40, 10.0],
                    [21, 441, 1, 10.5, 22, 20, 42, 10.5],
                    [22, 484, 0, 11.0, 23, 21, 44, 11.0],
                    [23, 529, 1, 11.5, 24, 22, 46, 11.5],
                    [24, 576, 0, 12.0, 25, 23, 48, 12.0],
                    [25, 625, 1, 12.5, 26, 24, 50, 12.5],
                    [26, 676, 0, 13.0, 27, 25, 52, 13.0],
                    [27, 729, 1, 13.5, 28, 26, 54, 13.5],
                    [28, 784, 0, 14.0, 29, 27, 56, 14.0],
                    [29, 841, 1, 14.5, 30, 28, 58, 14.5],
                    [30, 900, 0, 15.0, 31, 29, 60, 15.0],
                    [31, 961, 1, 15.5, 32, 30, 62, 15.5],
                    [32, 1024, 0, 16.0, 33, 31, 64, 16.0],
                    [33, 1089, 1, 16.5, 34, 32, 66, 16.5],
                    [34, 1156, 0, 17.0, 35, 33, 68, 17.0],
                    [35, 1225, 1, 17.5, 36, 34, 70, 17.5],
                    [36, 1296, 0, 18.0, 37, 35, 72, 18.0],
                    [37, 1369, 1, 18.5, 38, 36, 74, 18.5],
                    [38, 1444, 0, 19.0, 39, 37, 76, 19.0],
                    [39, 1521, 1, 19.5, 40, 38, 78, 19.5],
                    [40, 1600, 0, 20.0, 41, 39, 80, 20.0],
                    [41, 1681, 1, 20.5, 42, 40, 82, 20.5],
                    [42, 1764, 0, 21.0, 43, 41, 84, 21.0],
                    [43, 1849, 1, 21.5, 44, 42, 86, 21.5],
                    [44, 1936, 0, 22.0, 45, 43, 88, 22.0],
                    [45, 2025, 1, 22.5, 46, 44, 90, 22.5],
                    [46, 2116, 0, 23.0, 47, 45, 92, 23.0],
                    [47, 2209, 1, 23.5, 48, 46, 94, 23.5],
                    [48, 2304, 0, 24.0, 49, 47, 96, 24.0],
                    [49, 2401, 1, 24.5, 50, 48, 98, 24.5],
                    [50, 2500, 0, 25.0, 51, 49, 100, 25.0],
                    [51, 2601, 1, 25.5, 52, 50, 102, 25.5],
                    [52, 2704, 0, 26.0, 53, 51, 104, 26.0],
                    [53, 2809, 1, 26.5, 54, 52, 106, 26.5],
                    [54, 2916, 0, 27.0, 55, 53, 108, 27.0],
                    [55, 3025, 1, 27.5, 56, 54, 110, 27.5],
                    [56, 3136, 0, 28.0, 57, 55, 112, 28.0],
                    [57, 3249, 1, 28.5, 58, 56, 114, 28.5],
                    [58, 3364, 0, 29.0, 59, 57, 116, 29.0],
                    [59, 3481, 1, 29.5, 60, 58, 118, 29.5],
                    [60, 3600, 0, 30.0, 61, 59, 120, 30.0],
                    [61, 3721, 1, 30.5, 62, 60, 122, 30.5],
                    [62, 3844, 0, 31.0, 63, 61, 124, 31.0],
                    [63, 3969, 1, 31.5, 64, 62, 126, 31.5],
                    [64, 4096, 0, 32.0, 65, 63, 128, 32.0],
                    [65, 4225, 1, 32.5, 66, 64, 130, 32.5],
                    [66, 4356, 0, 33.0, 67, 65, 132, 33.0],
                    [67, 4489, 1, 33.5, 68, 66, 134, 33.5],
                    [68, 4624, 0, 34.0, 69, 67, 136, 34.0],
                    [69, 4761, 1, 34.5, 70, 68, 138, 34.5],
                    [70, 4900, 0, 35.0, 71, 69, 140, 35.0],
                    [71, 5041, 1, 35.5, 72, 70, 142, 35.5],
                    [72, 5184, 0, 36.0, 73, 71, 144, 36.0],
                    [73, 5329, 1, 36.5, 74, 72, 146, 36.5],
                    [74, 5476, 0, 37.0, 75, 73, 148, 37.0],
                    [75, 5625, 1, 37.5, 76, 74, 150, 37.5],
                    [76, 5776, 0, 38.0, 77, 75, 152, 38.0],
                    [77, 5929, 1, 38.5, 78, 76, 154, 38.5],
                    [78, 6084, 0, 39.0, 79, 77, 156, 39.0],
                    [79, 6241, 1, 39.5, 80, 78, 158, 39.5],
                    [80, 6400, 0, 40.0, 81, 79, 160, 40.0],
                    [81, 6561, 1, 40.5, 82, 80, 162, 40.5],
                    [82, 6724, 0, 41.0, 83, 81, 164, 41.0],
                    [83, 6889, 1, 41.5, 84, 82, 166, 41.5],
                    [84, 7056, 0, 42.0, 85, 83, 168, 42.0],
                    [85, 7225, 1, 42.5, 86, 84, 170, 42.5],
                    [86, 7396, 0, 43.0, 87, 85, 172, 43.0],
                    [87, 7569, 1, 43.5, 88, 86, 174, 43.5],
                    [88, 7744, 0, 44.0, 89, 87, 176, 44.0],
                    [89, 7921, 1, 44.5, 90, 88, 178, 44.5],
                    [90, 8100, 0, 45.0, 91, 89, 180, 45.0],
                    [91, 8281, 1, 45.5, 92, 90, 182, 45.5],
                    [92, 8464, 0, 46.0, 93, 91, 184, 46.0],
                    [93, 8649, 1, 46.5, 94, 92, 186, 46.5],
                    [94, 8836, 0, 47.0, 95, 93, 188, 47.0],
                    [95, 9025, 1, 47.5, 96, 94, 190, 47.5],
                    [96, 9216, 0, 48.0, 97, 95, 192, 48.0],
                    [97, 9409, 1, 48.5, 98, 96, 194, 48.5],
                    [98, 9604, 0, 49.0, 99, 97, 196, 49.0],
                    [99, 9801, 1, 49.5, 100, 98, 198, 49.5]])

dataset = CellData(data)
train_loader = DataLoader(dataset, batch_size=5, shuffle=True)
test_loader = DataLoader(dataset, batch_size=5, shuffle=True)

model = ODENet(device, data_dim, hidden_dim, time_dependent=False, non_linearity='relu')

criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)

train_epochs = 1000
test_epochs = 10

# Train the model
model.train()
trainer = Trainer(model, optimizer, device)
trainer.train(train_loader, train_epochs)

# Test the model
model.eval()
tester = Tester(model, device)
tester.test(test_loader, test_epochs)
